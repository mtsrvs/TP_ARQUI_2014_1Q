#include "../include/kasm.h"
#include "../include/defs.h"
#include "../include/file_descriptor.h"
#include "../include/circular_buffer.h"

DESCR_INT idt[0xA];			/* IDT de 10 entradas*/
IDTR idtr;				/* IDTR */

CircularBuffer keyboard_buffer;

int tickpos=640;

void int_08() {

    // char *video = (char *) 0xb8000;
    // video[tickpos+=2]='*';

}

void key_press(byte scancode)
{
  char ascii;

  switch(scancode){
  	case 0x1d: set_ctrl_pressed(true);
  			   break;
  	case 0x3a: chance_caplock_state();
  			   break;
  	case 0x2a: set_shift_pressed(true);
  			   break;
  	default:   ascii = scancode_to_ascii(scancode);
    		   cbWrite(&keyboard_buffer, &ascii); 
  }		
}

void key_release(byte scancode)
{
  switch(scancode){
  	case 0x9d: set_ctrl_pressed(false); 
  			   break;
  	case 0xaa: set_shift_pressed(false); 
  			   break;
  }
}

void keyboard_handler(unsigned char scancode){
    if((scancode & 0x80) == 0x80){
		key_release(scancode); // key release (BREAK CODE)
  	}else{
   		key_press(scancode); // key press (MAKE CODE)
  	}
}

int _read(int fd, char *buf, int n){
	int i;

  char *aux_buf[256];
  buf = aux_buf[0];

	if(fd == STDIN){
		for(i = 0; i < n; i++){
			if(!cbIsEmpty(&keyboard_buffer)){
				cbRead(&keyboard_buffer, aux_buf[i]);
			}
		}	
	}
  aux_buf[i]= '\0';
	return 0;
}

int _write(int fd, char *buf, int n){
	int i = 0;
	if(fd == STDIN){
		for( ; i < n; i++){
		  video_write(fd, buf[n]);			
		}
	}
  return i;
}

/**********************************************
kmain() 
Punto de entrada de cÃ³o C.
*************************************************/

kmain() 
{

        int i,num;

 // Borra la pantalla.  

	// k_clear_screen();


/* CARGA DE IDT CON LA RUTINA DE ATENCION DE IRQ0    */

        setup_IDT_entry (&idt[0x08], 0x08, (dword)&_int_08_hand, ACS_INT, 0); // Timer Tick
        setup_IDT_entry (&idt[0x09], 0x08, (dword)&_int_09_hand, ACS_INT, 0); // Keyboard
	
/* Carga de IDTR    */

	idtr.base = 0;  
	idtr.base +=(dword) &idt;
	idtr.limit = sizeof(idt)-1;
	
	_lidt (&idtr);	

	_Cli();
/* Habilito interrupcion de timer tick*/

        _mascaraPIC1(0xFC);
        _mascaraPIC2(0xFF);
        
	_Sti();

        cbInit(&keyboard_buffer);
        initialize_video();
        video_write(STDOUT, 'a');

        while(1)
        {
        video_write(STDOUT, 'a');
    // char *video = (char *) 0xb8000;
    // video[tickpos+=2]='*';
        }
	
}

